import telebot
from telebot import types
import json

TOKEN = "–°—é–¥–∞ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞"
bot = telebot.TeleBot(TOKEN)

DATA_FILE = "sessions_data.json"
sessions = {}
waiting_users = []
user_interests = {}
INTERESTS = ['üéô–ú—É–∑—ã–∫–∞', 'üé•–ö–∏–Ω–æ', 'üìö–ö–Ω–∏–≥–∏', 'üéñ–°–ø–æ—Ä—Ç', 'üîã–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 'üóø–ò—Å–∫—É—Å—Å—Ç–≤–æ', 'üîû18+']

try:
    with open(DATA_FILE, "r") as file:
        data = json.load(file)
        sessions = data.get("sessions", {})
        waiting_users = data.get("waiting_users", [])
        user_interests = data.get("user_interests", {})
except FileNotFoundError:
    pass

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.chat.id
    update_markup(user_id)
    update_interests_message(user_id)

@bot.message_handler(commands=['new'])
def handle_new_command(message):
    handle_switch(message)

@bot.message_handler(commands=['stop'])
def handle_stop_command(message):
    handle_end(message)

@bot.message_handler(commands=['off'])
def handle_off_command(message):
    stop_search(message)

@bot.message_handler(commands=['on'])
def handle_on_command(message):
    handle_search(message)    

def update_markup(user_id):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"
    if user_id in sessions:
        markup.add(types.KeyboardButton('üîÑ –°–º–µ–Ω–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞'), types.KeyboardButton('‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä'))
        text += " /new –Ω–æ–≤—ã–π, /stop —Å—Ç–æ–ø"
    elif user_id in waiting_users:
        markup.add(types.KeyboardButton('üõë –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–∏—Å–∫'))
        text += " /off –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–∏—Å–∫"
    else:
        markup.add(types.KeyboardButton('üîç –ò—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞'), types.KeyboardButton('üìù –ü—Ä–æ—Ñ–∏–ª—å'))
        text += " /on –∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"

    bot.send_message(user_id, text, reply_markup=markup)

user_interests_message_ids = {}

    

@bot.message_handler(func=lambda message: message.text == 'üìù –ü—Ä–æ—Ñ–∏–ª—å' or message.text == '/change_interests')
def handle_profile_command(message):
    user_id = message.chat.id
    handle_profile(user_id)

def handle_profile(user_id):
    markup = types.InlineKeyboardMarkup()
    for interest in INTERESTS:
        if interest in user_interests.get(user_id, []):
            continue  # Skip interests already selected
        markup.add(types.InlineKeyboardButton(interest, callback_data=f"interest_{interest}"))
    markup.add(types.InlineKeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã', callback_data="save_interests"))
    # Add a button to allow users to change their interests
    markup.add(types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã', callback_data="change_interests"))
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:", reply_markup=markup)

# Add a callback handler for changing interests
@bot.callback_query_handler(func=lambda call: call.data == "change_interests")
def change_interests(call):
    user_id = call.message.chat.id
    # Reset previously selected interests
    user_interests[user_id] = []
    # Trigger the interest selection process again
    handle_profile(user_id) 

@bot.callback_query_handler(func=lambda call: call.data.startswith("interest_"))
def handle_interest_selection(call):
    user_id = call.message.chat.id
    interest = call.data.split("_")[1]
    
    if user_id not in user_interests:
        user_interests[user_id] = []
        
    if interest not in user_interests[user_id]:
        if len(user_interests[user_id]) < 3:  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ —Ç—Ä–µ—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
            user_interests[user_id].append(interest)
            bot.send_message(user_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å: {interest}")
        else:
            bot.send_message(user_id, "–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
        update_interests_message(user_id)

def update_interests_message(user_id):
    if user_id in user_interests_message_ids:
        message_id = user_interests_message_ids[user_id]
        markup = types.InlineKeyboardMarkup()
        for interest in INTERESTS:
            if interest in user_interests.get(user_id, []):
                continue  # –ò–Ω—Ç–µ—Ä–µ—Å —É–∂–µ –≤—ã–±—Ä–∞–Ω
            markup.add(types.InlineKeyboardButton(interest, callback_data=f"interest_{interest}"))
        markup.add(types.InlineKeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã', callback_data="save_interests"))
        try:
            bot.edit_message_text(chat_id=user_id, message_id=message_id,
                                  text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:", reply_markup=markup)
        except telebot.apihelper.ApiTelegramException as e:
            print(f"Failed to edit message: {e}")


@bot.callback_query_handler(func=lambda call: call.data == "save_interests")
def save_interests(call):
    user_id = call.message.chat.id
    bot.send_message(user_id, f"–í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {', '.join(user_interests.get(user_id, []))}")
    update_markup(user_id)

@bot.message_handler(func=lambda message: message.text in ['üîç –ò—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞', 'üîç –ü—Ä–æ—Ñ–∏–ª—å'])
def handle_commands(message):
    if message.text == 'üîç –ü—Ä–æ—Ñ–∏–ª—å':
        handle_profile(message)
    elif message.text == 'üîç –ò—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞':
        handle_search(message)

@bot.message_handler(func=lambda message: message.text == 'üîç –ò—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞')
def handle_search(message):
    user_id = message.chat.id
    if user_id in sessions:
        bot.send_message(user_id, "–í—ã —É–∂–µ –æ–±—â–∞–µ—Ç–µ—Å—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üîÑ –°–º–µ–Ω–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞' –∏–ª–∏ '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä'.")
    elif user_id in waiting_users:
        bot.send_message(user_id, "–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞–Ω–∏—è.")
    else:
        waiting_users.append(user_id)
        update_markup(user_id)
        bot.send_message(user_id, "–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è. –ò–¥–µ—Ç –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
        if len(waiting_users) >= 2:
            connect_users()

@bot.message_handler(func=lambda message: message.text == 'üõë –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–∏—Å–∫')
def stop_search(message):
    user_id = message.chat.id
    if user_id in waiting_users:
        waiting_users.remove(user_id)
        bot.send_message(user_id, "–ü–æ–∏—Å–∫ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω.")
        update_markup(user_id)

@bot.message_handler(func=lambda message: message.text == 'üîÑ –°–º–µ–Ω–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞')
def handle_switch(message):
    user_id = message.chat.id
    if user_id in sessions:
        partner_id = sessions.pop(user_id)
        sessions.pop(partner_id, None)
        waiting_users.extend([user_id, partner_id])
        bot.send_message(partner_id, "–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Ä–µ—à–∏–ª —Å–º–µ–Ω–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
        bot.send_message(user_id, "–í—ã —Ä–µ—à–∏–ª–∏ —Å–º–µ–Ω–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
        connect_users()
    else:
        bot.send_message(user_id, "–í—ã –Ω–µ –æ–±—â–∞–µ—Ç–µ—Å—å —Å–µ–π—á–∞—Å, —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")

@bot.message_handler(func=lambda message: message.text == '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä')
def handle_end(message):
    user_id = message.chat.id
    end_conversation(user_id)

def end_conversation(user_id):
    if user_id in sessions:
        partner_id = sessions.pop(user_id)
        sessions.pop(partner_id, None)
        bot.send_message(user_id, "–†–∞–∑–≥–æ–≤–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.")
        bot.send_message(partner_id, "–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–∑–≥–æ–≤–æ—Ä. –í—ã –±—É–¥–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
        update_markup(user_id)
        waiting_users.append(partner_id)
        update_markup(partner_id)
        if len(waiting_users) >= 2:
            connect_users()
    else:
        bot.send_message(user_id, "–í—ã –Ω–µ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ, —á—Ç–æ–±—ã –µ–≥–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å.")
        update_markup(user_id)

@bot.message_handler(func=lambda message: message.chat.id in sessions and message.text)
def relay_message(message):
    sender_id = message.chat.id
    receiver_id = sessions[sender_id]
    bot.send_message(receiver_id, message.text)
    print(f"–ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_id} –∫ {receiver_id}: {message.text}")

def connect_users():
    while len(waiting_users) > 1:
        user1 = waiting_users.pop(0)
        user2 = waiting_users.pop(0)
        sessions[user1] = user2
        sessions[user2] = user1
        interests_user1 = ', '.join(user_interests.get(user1, []))
        interests_user2 = ', '.join(user_interests.get(user2, []))
        try:
            bot.send_message(user1, f"–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ò–Ω—Ç–µ—Ä–µ—Å—ã —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: {interests_user2}")
            bot.send_message(user2, f"–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ò–Ω—Ç–µ—Ä–µ—Å—ã —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: {interests_user1}")
            update_markup(user1)
            update_markup(user2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def save_data():
    data = {"sessions": sessions, "waiting_users": waiting_users, "user_interests": user_interests}
    with open(DATA_FILE, "w") as file:
        json.dump(data, file)

import atexit
atexit.register(save_data)

bot.polling(non_stop=True)
